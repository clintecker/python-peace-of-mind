from unittest import TestCase
from peace_of_mind import malware
from peace_of_mind.malware import (DangerousURLError,
								   BadSafeBrowsingRequestError)
from mock import patch, Mock

class TestMalware(TestCase):
	def setUp(self):
		self.api_key = "ABQIAAAAqL3-_KKDNOlUP91S89jT3BQmkXEDGXwlTRRZTjBnksy186g4MQ"
		self.test_uri = "http://arstechnica.com"
		self.checker = malware.SafeBrowsingChecker(google_api_key = self.api_key)

		self._http_client_patcher = patch('peace_of_mind.malware.requests')
		self.mock_http_client = self._http_client_patcher.start()

		self.mock_http_response = Mock(name="Mock Response")
		self.mock_http_response.status_code = 204
		self.mock_http_response.content = ''

		self.mock_http_client.get.return_value = self.mock_http_response

		self.addCleanup(self._http_client_patcher.stop)

	def test_malware_checker_basic(self):
		r = self.checker.check_uri(self.test_uri)
		assert r is None

	def test_malware_checker_bad_url(self):
		self.mock_http_response.status_code = 200

		with self.assertRaises(DangerousURLError):
			self.mock_http_response.content = 'phishing'
			self.checker.check_uri(self.test_uri)

		with self.assertRaises(DangerousURLError):
			self.mock_http_response.content = 'malware'
			self.checker.check_uri(self.test_uri)

		with self.assertRaises(DangerousURLError):
			self.mock_http_response.content = 'malware,phishing'
			self.checker.check_uri(self.test_uri)

		with self.assertRaises(DangerousURLError):
			self.mock_http_response.content = 'aliens,robots'
			self.checker.check_uri(self.test_uri)

	def test_malware_checker_bad_request(self):
		self.mock_http_response.status_code = 400

		with self.assertRaises(BadSafeBrowsingRequestError):
			self.checker.check_uri(self.test_uri)

	def test_malware_checker_not_authorized(self):
		self.mock_http_response.status_code = 401

		with self.assertRaises(BadSafeBrowsingRequestError):
			self.checker.check_uri(self.test_uri)

	def test_malware_checker_forbidden(self):
		self.mock_http_response.status_code = 403

		with self.assertRaises(BadSafeBrowsingRequestError):
			self.checker.check_uri(self.test_uri)

	def test_malware_checker_service_unavailable(self):
		self.mock_http_response.status_code = 503

		with self.assertRaises(BadSafeBrowsingRequestError):
			self.checker.check_uri(self.test_uri)
