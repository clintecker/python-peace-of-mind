"""
# MalwareChecker

At first, this file would contain a SafeBrowsingChecker class that would
interface with Google's SafeBrowsing API.  Given a URL or set of URLs,
we would throw a warning or not given the response from Google.
"""
import requests

class BadSafeBrowsingRequestError(Exception):
	"""
	Raised when a request to the SafeBrowsing API does not succeed
	"""

class DangerousURLError(Exception):
	"""
	Raised when a given URL might be dangerous
	"""

class SafeBrowsingChecker(object):
	API_URI = "https://sb-ssl.google.com/safebrowsing/api/lookup"
	API_CLIENT_NAME = 'peace-of-mind'
	API_PROTOCOL_VERSION = '3.0'

	GOOD_URL       = 204
	BAD_URL        = 200
	BAD_REQUEST    = 400
	NOT_AUTHORIZED = 401
	FORBIDDEN      = 403
	SERVICE_DOWN   = 503

	def __init__(self, google_api_key):
		self.google_api_key = google_api_key

	def _api_params(self, url, params={}):
		defaults = dict(
			client = self.API_CLIENT_NAME,
			apikey = self.google_api_key,
			appver = '0.1',
			pver   = self.API_PROTOCOL_VERSION,
			url    = url
			)
		params.update(defaults)
		return params

	def check_uri(self, url):
		response = requests.get(self.API_URI, params=self._api_params(url=url))
		status_code = response.status_code
		response_body = response.content.strip()

		print (status_code, response_body)

		if status_code == self.BAD_REQUEST:
			raise BadSafeBrowsingRequestError("The SafeBrowsing API rejected the request as invalid")
		if status_code == self.NOT_AUTHORIZED:
			raise BadSafeBrowsingRequestError("The SafeBrowsing API rejected the request due to invalid authorization")
		if status_code == self.FORBIDDEN:
			raise BadSafeBrowsingRequestError("The SafeBrowsing API rejected the request as forbidden")
		if status_code == self.SERVICE_DOWN:
			raise BadSafeBrowsingRequestError("The SafeBrowsing API is unavailable at this time")
		if status_code == self.BAD_URL:
			raise DangerousURLError("The URL {} is suspected of containing {}. Advisory provided by Google http://code.google.com/apis/safebrowsing/safebrowsing_faq.html#whyAdvisory" \
				.format(
					url,
					" and ".join(response_body.split(','))
					))
		if status_code == self.GOOD_URL:
			return None

		raise BadSafeBrowsingRequestError("The SafeBrowsing API returned an unhandled status code {}".format(status_code))
